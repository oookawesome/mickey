---
layout: post
title: 클린 코드 책을 읽고
date: 2018-11-17 14:30:00 +0300
description: 클린 코드 애자일 소프트웨어 장인 정신 책에 대한 정리
image :
    feature: clean-coder.jpg
    topPosition: -50px
categories: clean code
tags: [Clean Code]
bgContrast: dark
bgGradientOpacity: darker
syntaxHighlighter: no
---

### 클린 코드 책을 읽고

#### 프롤로그
사무실 구석에 놓여있던 클린 코드 책이 갑자기 눈에 들어와 가져와 읽기 시작했다. 몇 개월전에 선배가 읽어보라고 추천해줬던 기억이 있는데, 이제서야 읽게 되었다.

#### 2. 의미있는 이름
프로그래머는 매 순간 이름을 짓는다.

##### 의도를 분명히 밝혀라
- 의도가 분명한 이름은 짓는 것은 __정말로__ 중요하다.

##### 그릇된 정보를 피하라
- list가 아닌 것에는 list를 붙이지 마라(타입을 뒤에 붙이지 않는 것을 추천)

##### 의미있게 구분하라
- zork라는 이름을 쓰고 있다고 새 변수를 thezork라고 지으면 안된다.

##### 발음하기 쉬운 이름을 사용하라
- genymdhms 이런 변수는 쓰지마라

##### 검색하기 쉬운 이름을 사용하라
- WORK_DAYS_PER_WEEK와 같은 단어는 찾기 쉽지만, 5같은 숫자는 찾기 어렵다.

##### 인코딩을 피하라

##### 자신의 기억력을 자랑하지 마라
- 루프의 반복변수(i,j) 정도 외에 한글자로 이름짓지 말라
- 명료함이 최고다

##### 클래스이름은 명사구로 지어라

##### 메서드이름은 동사구가 적합하다

##### 기발한 이름은 피하라
- kill()대신 whack()라고 짓지 마라

##### 한 개념에 한 단어를 사용하라
- 똑같은 메서드를 클래스마다 fetch, get, retrieve라고 짓는 일은 하지 말라

##### 말장난을 하지마라
- 전부 add를 쓰고 있다고 다른 동작을 하는 새 메서드에 add라고 붙여선 안된다. 그것을 말장난이다.

##### 해법 영역에서 가져온 이름을 사용하라
- 코드를 읽는 사람도 프로그래머이므로, 전산 용어, 알고리즘 용어 등을 사용해도 괜찮다.

##### 문제 영역에서 가져온 이름을 사용하라

##### 의미있는 맥락을 추가하라
- firstName, state, housdeNumber 같은 변수를 사용한다면, 변수에 Addr 접두어를 붙이거나, Address클래스를 만들어 맥락을 표현하는 것이 좋다.

##### 불필요한 맥락을 없애라
- GSD라는 이름의 애플리케이션을 만든다고, 모든 모듈이나 클래스에 GSD 접두어를 붙이지 마라.

#### 3. 함수
어떤 프로그램이든 가장 기본적인 단위는 함수이다.

##### 작게 만들어라!
- 함수는 작게 만들어야한다.

##### 한 가지만 해라!
- __함수는 한 가지를 해야 한다. 그 한 가지를 잘해야 한다. 그 한 가지만을 해야 한다.__

##### 함수 당 추상화 수준은 하나로!
- 함수가 한 가지를 하기 위해서는 추상화 수준이 동일해야 한다.
- getHTML()과 append("\n")은 추상화 수준이 다르다.
- 내려가기 규칙 : 위에서 아래로 내려갈 수록 추상화 수준이 낮아지도록 작성

##### 서술적인 이름을 사용하라!
- 이름이 길어도 괜찮다. 길고 서술적인 이름이 짧고 어려운 이름보다 좋다.

##### 함수 인수
- 함수에서 이상적인 인수의 개수는 0개 이고, 3개 이상은 피하는 게 좋다.
- 인수가 많아질수록 이해하기 어렵다.
- 플래그 인수는 추하다.

##### 부수효과를 일으키지 마라!
- 함수 내부에서 남몰래 전역 변수를 수정하거나 하는 등의 일은 하면 안된다.

##### 명령과 조회를 분리하라!
- 함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야한다.

##### 오류코드 보다 예외를 사용하라!
- 오류코드를 리턴하는 방식은 이후 if문을 만들어낸다.
- try/catch블록은 원래 추하다. 따라서 try/catch 블록만 따로 함수로 뽑아내는 것이 좋다.

##### 반복하지 마라!
- 중복은 소프트웨어에서 만악의 근원이다.

##### 함수를 어떻게 짜죠?
- 소프트웨어를 짜는 행위는 글짓기와 비슷하다.
- 어설픈 초안을 만들고, 테스트 케이스를 짠 뒤, 함수를 다듬는다.

#### 4장 주석
우리는 의도를 코드로 표현하지 못해, 그러니까 실패를 만해하기 위해 주석을 사용한다. 진실은 한 곳에만 존재한다. 바로 코드다.

##### 주석은 나쁜 코드를 보완하지 못한다
- 자신이 저지른 난장판을 주석으로 설명하려 애쓰는 대신, 그 난장판을 깨끗이 치우는 데 시간을 써라

#### 5장 형식 맞추기
코드 형식은 중요하다! 프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야한다.

##### 적절한 행 길이를 유지하라
- 200줄 정도의 파일들로도 커다란 시스템을 구축할 수 있다. 일반적으로 큰 파일 보다 작은 파일이 이해하기 쉽다.

##### 개념은 빈 행으로 분리하라

##### 세로 밀집도
- 서로 밀접한 코드 행은 세로로 놓여야 한다.

##### 수직 거리
- 변수 선언 : 변수는 사용하는 위치에 최대한 가까이 선언한다.
- 인스턴스 변수 : 인스턴스 변수는 클래스 맨 처음에 선언한다. 위치에 대한 이견이 있지만, 맨 처음이던 맨 뒤던, 모은다는 것이 중요하다.
- 종속 함수 : 한 함수가 다른 함수를 호출한다면, 두 함수는 세로로 가까이 배치한다.
- 개념적 유사성 : 같은 변수를 사용하거나, 하는 동작이 비슷한 함수는 가까이 배치한다.

##### 세로 순서
- 함수 호출의 종속성은 아래 방향으로 유지한다. 호출되는 함수를 호출하는 함수보다 나중에 배치한다.

##### 가로 공백과 밀집도
- 가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다. 할당문에 공백을 주어 왼쪽/오른쪽 요소를 확실히 나눌 수 있고, 함수이름과 괄호는 밀접하기에 공백을 넣지 않는다.

##### 들여 쓰기
- 간단한 if문, 함수에서 들여쓰기를 무시하고 싶은 충동을 이겨내라.

##### 팀 규칙
- __팀은 한 가지 규칙에 합의해야 한다. 그리고 모든 팀원이 그 규칙을 따라야 한다.__ 소프트웨어의 스타일은 일관적이고 매끄러워야 한다.
